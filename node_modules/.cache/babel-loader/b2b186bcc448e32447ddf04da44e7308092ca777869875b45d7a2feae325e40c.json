{"ast":null,"code":"import { createStore } from 'vuex';\nimport axios from 'axios';\n\n// Criação da store Vuex\nexport default createStore({\n  // State é onde armazenamos os dados compartilhados no aplicativo\n  state: {\n    products: [],\n    // Lista de produtos armazenada no estado global\n    category: []\n  },\n  // Getters são usados para acessar e processar os dados do estado\n  getters: {\n    allProducts: state => state.products,\n    // Retorna todos os produtos armazenados no estado\n    allCategory: state => state.products\n  },\n  // Mutations são métodos sincronizados para modificar o estado\n  mutations: {\n    setProducts(state, products) {\n      // Atualiza a lista de produtos no estado com os dados recebidos\n      state.products = products;\n    },\n    setCategory(state, category) {\n      // Atualiza a lista de produtos no estado com os dados recebidos\n      state.category = category;\n    }\n  },\n  // Actions são métodos assíncronos usados para lidar com chamadas externas ou operações complexas\n  actions: {\n    fetchProducts({\n      commit\n    }) {\n      // Faz uma requisição HTTP para obter a lista de produtos\n      axios.get('https://fakestoreapi.in/api/products').then(response => {\n        // Chama a mutation 'setProducts' para atualizar o estado com os produtos recebidos\n        commit('setProducts', response.data);\n      });\n    },\n    fetchCategory({\n      commit\n    }) {\n      axios.get('https://fakestoreapi.in/api/products/category').then(response => {\n        // Chama a mutation 'setProducts' para atualizar o estado com os produtos recebidos\n        commit('setCategory', response.data);\n      });\n    }\n  },\n  // Modules podem ser usados para dividir a store em partes menores e organizadas (não utilizado neste exemplo)\n  modules: {}\n});","map":{"version":3,"names":["createStore","axios","state","products","category","getters","allProducts","allCategory","mutations","setProducts","setCategory","actions","fetchProducts","commit","get","then","response","data","fetchCategory","modules"],"sources":["/Users/vagnerzezo/Documents/development/project/zmoveis/src/store/index.js"],"sourcesContent":["import { createStore } from 'vuex'\nimport axios from 'axios';\n\n// Criação da store Vuex\nexport default createStore({\n  // State é onde armazenamos os dados compartilhados no aplicativo\n  state: {\n    products: [], // Lista de produtos armazenada no estado global\n    category: []\n  },\n\n  // Getters são usados para acessar e processar os dados do estado\n  getters: {\n    allProducts: state => state.products, // Retorna todos os produtos armazenados no estado\n    allCategory: state => state.products,\n  },\n\n  // Mutations são métodos sincronizados para modificar o estado\n  mutations: {\n    setProducts(state, products) {\n      // Atualiza a lista de produtos no estado com os dados recebidos\n      state.products = products;\n    },\n    setCategory(state, category) {\n      // Atualiza a lista de produtos no estado com os dados recebidos\n      state.category = category;\n    }\n  },\n\n  // Actions são métodos assíncronos usados para lidar com chamadas externas ou operações complexas\n  actions: {\n    fetchProducts({ commit }) {\n      // Faz uma requisição HTTP para obter a lista de produtos\n      axios.get('https://fakestoreapi.in/api/products')\n        .then(response => {\n          // Chama a mutation 'setProducts' para atualizar o estado com os produtos recebidos\n          commit('setProducts', response.data);\n        });\n    },\n    fetchCategory({ commit }) {\n      axios.get('https://fakestoreapi.in/api/products/category')\n        .then(response => {\n          // Chama a mutation 'setProducts' para atualizar o estado com os produtos recebidos\n          commit('setCategory', response.data);\n        });\n    },\n  },\n\n  // Modules podem ser usados para dividir a store em partes menores e organizadas (não utilizado neste exemplo)\n  modules: {\n  }\n})"],"mappings":"AAAA,SAASA,WAAW,QAAQ,MAAM;AAClC,OAAOC,KAAK,MAAM,OAAO;;AAEzB;AACA,eAAeD,WAAW,CAAC;EACzB;EACAE,KAAK,EAAE;IACLC,QAAQ,EAAE,EAAE;IAAE;IACdC,QAAQ,EAAE;EACZ,CAAC;EAED;EACAC,OAAO,EAAE;IACPC,WAAW,EAAEJ,KAAK,IAAIA,KAAK,CAACC,QAAQ;IAAE;IACtCI,WAAW,EAAEL,KAAK,IAAIA,KAAK,CAACC;EAC9B,CAAC;EAED;EACAK,SAAS,EAAE;IACTC,WAAWA,CAACP,KAAK,EAAEC,QAAQ,EAAE;MAC3B;MACAD,KAAK,CAACC,QAAQ,GAAGA,QAAQ;IAC3B,CAAC;IACDO,WAAWA,CAACR,KAAK,EAAEE,QAAQ,EAAE;MAC3B;MACAF,KAAK,CAACE,QAAQ,GAAGA,QAAQ;IAC3B;EACF,CAAC;EAED;EACAO,OAAO,EAAE;IACPC,aAAaA,CAAC;MAAEC;IAAO,CAAC,EAAE;MACxB;MACAZ,KAAK,CAACa,GAAG,CAAC,sCAAsC,CAAC,CAC9CC,IAAI,CAACC,QAAQ,IAAI;QAChB;QACAH,MAAM,CAAC,aAAa,EAAEG,QAAQ,CAACC,IAAI,CAAC;MACtC,CAAC,CAAC;IACN,CAAC;IACDC,aAAaA,CAAC;MAAEL;IAAO,CAAC,EAAE;MACxBZ,KAAK,CAACa,GAAG,CAAC,+CAA+C,CAAC,CACvDC,IAAI,CAACC,QAAQ,IAAI;QAChB;QACAH,MAAM,CAAC,aAAa,EAAEG,QAAQ,CAACC,IAAI,CAAC;MACtC,CAAC,CAAC;IACN;EACF,CAAC;EAED;EACAE,OAAO,EAAE,CACT;AACF,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}