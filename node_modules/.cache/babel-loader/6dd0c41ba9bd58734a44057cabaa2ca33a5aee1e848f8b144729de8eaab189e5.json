{"ast":null,"code":"import { createStore } from 'vuex';\nimport axios from 'axios';\n\n// Criação da store Vuex\nexport default createStore({\n  // State é onde armazenamos os dados compartilhados no aplicativo\n  state: {\n    products: [] // Lista de produtos armazenada no estado global\n  },\n  // Getters são usados para acessar e processar os dados do estado\n  getters: {\n    allProducts: state => state.products // Retorna todos os produtos armazenados no estado\n  },\n  // Mutations são métodos sincronizados para modificar o estado\n  mutations: {\n    setProducts(state, products) {\n      // Atualiza a lista de produtos no estado com os dados recebidos\n      state.products = products;\n    }\n  },\n  // Actions são métodos assíncronos usados para lidar com chamadas externas ou operações complexas\n  actions: {\n    fetchProducts({\n      commit\n    }) {\n      // Faz uma requisição HTTP para obter a lista de produtos\n      axios.get('https://fakestoreapi.com/products').then(response => {\n        // Chama a mutation 'setProducts' para atualizar o estado com os produtos recebidos\n        commit('setProducts', response.data);\n      });\n    }\n  },\n  // Modules podem ser usados para dividir a store em partes menores e organizadas (não utilizado neste exemplo)\n  modules: {}\n});","map":{"version":3,"names":["createStore","axios","state","products","getters","allProducts","mutations","setProducts","actions","fetchProducts","commit","get","then","response","data","modules"],"sources":["/Users/vagnerzezo/Documents/development/project/zmoveis/src/store/index.js"],"sourcesContent":["import { createStore } from 'vuex'\nimport axios from 'axios';\n\n// Criação da store Vuex\nexport default createStore({\n  // State é onde armazenamos os dados compartilhados no aplicativo\n  state: {\n    products: [], // Lista de produtos armazenada no estado global\n  },\n\n  // Getters são usados para acessar e processar os dados do estado\n  getters: {\n    allProducts: state => state.products, // Retorna todos os produtos armazenados no estado\n  },\n\n  // Mutations são métodos sincronizados para modificar o estado\n  mutations: {\n    setProducts(state, products) {\n      // Atualiza a lista de produtos no estado com os dados recebidos\n      state.products = products;\n    }\n  },\n\n  // Actions são métodos assíncronos usados para lidar com chamadas externas ou operações complexas\n  actions: {\n    fetchProducts({ commit }) {\n      // Faz uma requisição HTTP para obter a lista de produtos\n      axios.get('https://fakestoreapi.com/products')\n        .then(response => {\n          // Chama a mutation 'setProducts' para atualizar o estado com os produtos recebidos\n          commit('setProducts', response.data);\n        });\n    },\n  },\n\n  // Modules podem ser usados para dividir a store em partes menores e organizadas (não utilizado neste exemplo)\n  modules: {\n  }\n})"],"mappings":"AAAA,SAASA,WAAW,QAAQ,MAAM;AAClC,OAAOC,KAAK,MAAM,OAAO;;AAEzB;AACA,eAAeD,WAAW,CAAC;EACzB;EACAE,KAAK,EAAE;IACLC,QAAQ,EAAE,EAAE,CAAE;EAChB,CAAC;EAED;EACAC,OAAO,EAAE;IACPC,WAAW,EAAEH,KAAK,IAAIA,KAAK,CAACC,QAAQ,CAAE;EACxC,CAAC;EAED;EACAG,SAAS,EAAE;IACTC,WAAWA,CAACL,KAAK,EAAEC,QAAQ,EAAE;MAC3B;MACAD,KAAK,CAACC,QAAQ,GAAGA,QAAQ;IAC3B;EACF,CAAC;EAED;EACAK,OAAO,EAAE;IACPC,aAAaA,CAAC;MAAEC;IAAO,CAAC,EAAE;MACxB;MACAT,KAAK,CAACU,GAAG,CAAC,mCAAmC,CAAC,CAC3CC,IAAI,CAACC,QAAQ,IAAI;QAChB;QACAH,MAAM,CAAC,aAAa,EAAEG,QAAQ,CAACC,IAAI,CAAC;MACtC,CAAC,CAAC;IACN;EACF,CAAC;EAED;EACAC,OAAO,EAAE,CACT;AACF,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}