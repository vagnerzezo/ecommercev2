{"ast":null,"code":"import \"core-js/modules/esnext.iterator.map.js\";\nimport { createStore } from 'vuex';\nimport axios from 'axios';\n\n// Criação da store Vuex\nexport default createStore({\n  // State é onde armazenamos os dados compartilhados no aplicativo\n  state: {\n    products: [],\n    // Lista de produtos armazenada no estado global\n    category: []\n  },\n  // Getters são usados para acessar e processar os dados do estado\n  getters: {\n    allProducts: state => state.products,\n    // Retorna todos os produtos armazenados no estado\n    allCategory: state => state.category\n  },\n  // Mutations são métodos sincronizados para modificar o estado\n  mutations: {\n    setProducts(state, products) {\n      // Atualiza a lista de produtos no estado com os dados recebidos\n      state.products = products;\n    },\n    setCategory(state, category) {\n      state.category = category;\n    }\n  },\n  // Actions são métodos assíncronos usados para lidar com chamadas externas ou operações complexas\n  actions: {\n    async fetchProducts({\n      commit\n    }) {\n      try {\n        // Faz uma requisição HTTP para obter a lista de produtos\n        const response = await axios.get('https://fakestoreapi.in/api/products');\n        // Garante que os dados estão em JSON e chama a mutation\n        commit('setProducts', response.data);\n      } catch (error) {\n        console.error('Erro ao buscar produtos:', error);\n      }\n    },\n    async fetchCategory({\n      commit\n    }) {\n      try {\n        // Faz a requisição para buscar categorias\n        const response = await axios.get('https://fakestoreapi.in/api/products/category');\n        // Apenas extrai os nomes das categorias, supondo que a API retorna um array de objetos com o atributo `name`\n        const categoryNames = response.data.map(category => category.name);\n        // Atualiza o estado com os nomes das categorias\n        commit('setCategory', categoryNames);\n      } catch (error) {\n        console.error('Erro ao buscar categorias:', error);\n      }\n    }\n  },\n  // Modules podem ser usados para dividir a store em partes menores e organizadas (não utilizado neste exemplo)\n  modules: {}\n});","map":{"version":3,"names":["createStore","axios","state","products","category","getters","allProducts","allCategory","mutations","setProducts","setCategory","actions","fetchProducts","commit","response","get","data","error","console","fetchCategory","categoryNames","map","name","modules"],"sources":["/Users/vagnerzezo/Documents/development/project/zmoveis/src/store/index.js"],"sourcesContent":["import { createStore } from 'vuex'\nimport axios from 'axios';\n\n// Criação da store Vuex\nexport default createStore({\n  // State é onde armazenamos os dados compartilhados no aplicativo\n  state: {\n    products: [], // Lista de produtos armazenada no estado global\n    category: []\n  },\n\n  // Getters são usados para acessar e processar os dados do estado\n  getters: {\n    allProducts: state => state.products, // Retorna todos os produtos armazenados no estado\n    allCategory: state => state.category,\n  },\n\n  // Mutations são métodos sincronizados para modificar o estado\n  mutations: {\n    setProducts(state, products) {\n      // Atualiza a lista de produtos no estado com os dados recebidos\n      state.products = products;\n    },\n    setCategory(state, category) {\n      state.category = category;\n    }\n  },\n\n  // Actions são métodos assíncronos usados para lidar com chamadas externas ou operações complexas\n  actions: {\n    async fetchProducts({ commit }) {\n      try {\n        // Faz uma requisição HTTP para obter a lista de produtos\n        const response = await axios.get('https://fakestoreapi.in/api/products');\n        // Garante que os dados estão em JSON e chama a mutation\n        commit('setProducts', response.data);\n      } catch (error) {\n        console.error('Erro ao buscar produtos:', error);\n      }\n    },\n    async fetchCategory({ commit }) {\n      try {\n        // Faz a requisição para buscar categorias\n        const response = await axios.get('https://fakestoreapi.in/api/products/category');\n        // Apenas extrai os nomes das categorias, supondo que a API retorna um array de objetos com o atributo `name`\n        const categoryNames = response.data.map(category => category.name);\n        // Atualiza o estado com os nomes das categorias\n        commit('setCategory', categoryNames);\n      } catch (error) {\n        console.error('Erro ao buscar categorias:', error);\n      }\n    },\n  },\n\n  // Modules podem ser usados para dividir a store em partes menores e organizadas (não utilizado neste exemplo)\n  modules: {\n  }\n});"],"mappings":";AAAA,SAASA,WAAW,QAAQ,MAAM;AAClC,OAAOC,KAAK,MAAM,OAAO;;AAEzB;AACA,eAAeD,WAAW,CAAC;EACzB;EACAE,KAAK,EAAE;IACLC,QAAQ,EAAE,EAAE;IAAE;IACdC,QAAQ,EAAE;EACZ,CAAC;EAED;EACAC,OAAO,EAAE;IACPC,WAAW,EAAEJ,KAAK,IAAIA,KAAK,CAACC,QAAQ;IAAE;IACtCI,WAAW,EAAEL,KAAK,IAAIA,KAAK,CAACE;EAC9B,CAAC;EAED;EACAI,SAAS,EAAE;IACTC,WAAWA,CAACP,KAAK,EAAEC,QAAQ,EAAE;MAC3B;MACAD,KAAK,CAACC,QAAQ,GAAGA,QAAQ;IAC3B,CAAC;IACDO,WAAWA,CAACR,KAAK,EAAEE,QAAQ,EAAE;MAC3BF,KAAK,CAACE,QAAQ,GAAGA,QAAQ;IAC3B;EACF,CAAC;EAED;EACAO,OAAO,EAAE;IACP,MAAMC,aAAaA,CAAC;MAAEC;IAAO,CAAC,EAAE;MAC9B,IAAI;QACF;QACA,MAAMC,QAAQ,GAAG,MAAMb,KAAK,CAACc,GAAG,CAAC,sCAAsC,CAAC;QACxE;QACAF,MAAM,CAAC,aAAa,EAAEC,QAAQ,CAACE,IAAI,CAAC;MACtC,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;MAClD;IACF,CAAC;IACD,MAAME,aAAaA,CAAC;MAAEN;IAAO,CAAC,EAAE;MAC9B,IAAI;QACF;QACA,MAAMC,QAAQ,GAAG,MAAMb,KAAK,CAACc,GAAG,CAAC,+CAA+C,CAAC;QACjF;QACA,MAAMK,aAAa,GAAGN,QAAQ,CAACE,IAAI,CAACK,GAAG,CAACjB,QAAQ,IAAIA,QAAQ,CAACkB,IAAI,CAAC;QAClE;QACAT,MAAM,CAAC,aAAa,EAAEO,aAAa,CAAC;MACtC,CAAC,CAAC,OAAOH,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;MACpD;IACF;EACF,CAAC;EAED;EACAM,OAAO,EAAE,CACT;AACF,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}