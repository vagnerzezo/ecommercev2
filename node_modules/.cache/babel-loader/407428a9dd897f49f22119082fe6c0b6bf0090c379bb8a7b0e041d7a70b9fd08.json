{"ast":null,"code":"'use strict';\n\nrequire(\"core-js/modules/esnext.iterator.map.js\");\nlet CssSyntaxError = require('./css-syntax-error');\nlet Stringifier = require('./stringifier');\nlet stringify = require('./stringify');\nlet {\n  isClean,\n  my\n} = require('./symbols');\nfunction cloneNode(obj, parent) {\n  let cloned = new obj.constructor();\n  for (let i in obj) {\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) {\n      /* c8 ignore next 2 */\n      continue;\n    }\n    if (i === 'proxyCache') continue;\n    let value = obj[i];\n    let type = typeof value;\n    if (i === 'parent' && type === 'object') {\n      if (parent) cloned[i] = parent;\n    } else if (i === 'source') {\n      cloned[i] = value;\n    } else if (Array.isArray(value)) {\n      cloned[i] = value.map(j => cloneNode(j, cloned));\n    } else {\n      if (type === 'object' && value !== null) value = cloneNode(value);\n      cloned[i] = value;\n    }\n  }\n  return cloned;\n}\nfunction sourceOffset(inputCSS, position) {\n  // Not all custom syntaxes support `offset` in `source.start` and `source.end`\n  if (position && typeof position.offset !== 'undefined') {\n    return position.offset;\n  }\n  let column = 1;\n  let line = 1;\n  let offset = 0;\n  for (let i = 0; i < inputCSS.length; i++) {\n    if (line === position.line && column === position.column) {\n      offset = i;\n      break;\n    }\n    if (inputCSS[i] === '\\n') {\n      column = 1;\n      line += 1;\n    } else {\n      column += 1;\n    }\n  }\n  return offset;\n}\nclass Node {\n  constructor(defaults = {}) {\n    this.raws = {};\n    this[isClean] = false;\n    this[my] = true;\n    for (let name in defaults) {\n      if (name === 'nodes') {\n        this.nodes = [];\n        for (let node of defaults[name]) {\n          if (typeof node.clone === 'function') {\n            this.append(node.clone());\n          } else {\n            this.append(node);\n          }\n        }\n      } else {\n        this[name] = defaults[name];\n      }\n    }\n  }\n  addToError(error) {\n    error.postcssNode = this;\n    if (error.stack && this.source && /\\n\\s{4}at /.test(error.stack)) {\n      let s = this.source;\n      error.stack = error.stack.replace(/\\n\\s{4}at /, `$&${s.input.from}:${s.start.line}:${s.start.column}$&`);\n    }\n    return error;\n  }\n  after(add) {\n    this.parent.insertAfter(this, add);\n    return this;\n  }\n  assign(overrides = {}) {\n    for (let name in overrides) {\n      this[name] = overrides[name];\n    }\n    return this;\n  }\n  before(add) {\n    this.parent.insertBefore(this, add);\n    return this;\n  }\n  cleanRaws(keepBetween) {\n    delete this.raws.before;\n    delete this.raws.after;\n    if (!keepBetween) delete this.raws.between;\n  }\n  clone(overrides = {}) {\n    let cloned = cloneNode(this);\n    for (let name in overrides) {\n      cloned[name] = overrides[name];\n    }\n    return cloned;\n  }\n  cloneAfter(overrides = {}) {\n    let cloned = this.clone(overrides);\n    this.parent.insertAfter(this, cloned);\n    return cloned;\n  }\n  cloneBefore(overrides = {}) {\n    let cloned = this.clone(overrides);\n    this.parent.insertBefore(this, cloned);\n    return cloned;\n  }\n  error(message, opts = {}) {\n    if (this.source) {\n      let {\n        end,\n        start\n      } = this.rangeBy(opts);\n      return this.source.input.error(message, {\n        column: start.column,\n        line: start.line\n      }, {\n        column: end.column,\n        line: end.line\n      }, opts);\n    }\n    return new CssSyntaxError(message);\n  }\n  getProxyProcessor() {\n    return {\n      get(node, prop) {\n        if (prop === 'proxyOf') {\n          return node;\n        } else if (prop === 'root') {\n          return () => node.root().toProxy();\n        } else {\n          return node[prop];\n        }\n      },\n      set(node, prop, value) {\n        if (node[prop] === value) return true;\n        node[prop] = value;\n        if (prop === 'prop' || prop === 'value' || prop === 'name' || prop === 'params' || prop === 'important' || /* c8 ignore next */\n        prop === 'text') {\n          node.markDirty();\n        }\n        return true;\n      }\n    };\n  }\n\n  /* c8 ignore next 3 */\n  markClean() {\n    this[isClean] = true;\n  }\n  markDirty() {\n    if (this[isClean]) {\n      this[isClean] = false;\n      let next = this;\n      while (next = next.parent) {\n        next[isClean] = false;\n      }\n    }\n  }\n  next() {\n    if (!this.parent) return undefined;\n    let index = this.parent.index(this);\n    return this.parent.nodes[index + 1];\n  }\n  positionBy(opts) {\n    let pos = this.source.start;\n    if (opts.index) {\n      pos = this.positionInside(opts.index);\n    } else if (opts.word) {\n      let stringRepresentation = this.source.input.css.slice(sourceOffset(this.source.input.css, this.source.start), sourceOffset(this.source.input.css, this.source.end));\n      let index = stringRepresentation.indexOf(opts.word);\n      if (index !== -1) pos = this.positionInside(index);\n    }\n    return pos;\n  }\n  positionInside(index) {\n    let column = this.source.start.column;\n    let line = this.source.start.line;\n    let offset = sourceOffset(this.source.input.css, this.source.start);\n    let end = offset + index;\n    for (let i = offset; i < end; i++) {\n      if (this.source.input.css[i] === '\\n') {\n        column = 1;\n        line += 1;\n      } else {\n        column += 1;\n      }\n    }\n    return {\n      column,\n      line\n    };\n  }\n  prev() {\n    if (!this.parent) return undefined;\n    let index = this.parent.index(this);\n    return this.parent.nodes[index - 1];\n  }\n  rangeBy(opts) {\n    let start = {\n      column: this.source.start.column,\n      line: this.source.start.line\n    };\n    let end = this.source.end ? {\n      column: this.source.end.column + 1,\n      line: this.source.end.line\n    } : {\n      column: start.column + 1,\n      line: start.line\n    };\n    if (opts.word) {\n      let stringRepresentation = this.source.input.css.slice(sourceOffset(this.source.input.css, this.source.start), sourceOffset(this.source.input.css, this.source.end));\n      let index = stringRepresentation.indexOf(opts.word);\n      if (index !== -1) {\n        start = this.positionInside(index);\n        end = this.positionInside(index + opts.word.length);\n      }\n    } else {\n      if (opts.start) {\n        start = {\n          column: opts.start.column,\n          line: opts.start.line\n        };\n      } else if (opts.index) {\n        start = this.positionInside(opts.index);\n      }\n      if (opts.end) {\n        end = {\n          column: opts.end.column,\n          line: opts.end.line\n        };\n      } else if (typeof opts.endIndex === 'number') {\n        end = this.positionInside(opts.endIndex);\n      } else if (opts.index) {\n        end = this.positionInside(opts.index + 1);\n      }\n    }\n    if (end.line < start.line || end.line === start.line && end.column <= start.column) {\n      end = {\n        column: start.column + 1,\n        line: start.line\n      };\n    }\n    return {\n      end,\n      start\n    };\n  }\n  raw(prop, defaultType) {\n    let str = new Stringifier();\n    return str.raw(this, prop, defaultType);\n  }\n  remove() {\n    if (this.parent) {\n      this.parent.removeChild(this);\n    }\n    this.parent = undefined;\n    return this;\n  }\n  replaceWith(...nodes) {\n    if (this.parent) {\n      let bookmark = this;\n      let foundSelf = false;\n      for (let node of nodes) {\n        if (node === this) {\n          foundSelf = true;\n        } else if (foundSelf) {\n          this.parent.insertAfter(bookmark, node);\n          bookmark = node;\n        } else {\n          this.parent.insertBefore(bookmark, node);\n        }\n      }\n      if (!foundSelf) {\n        this.remove();\n      }\n    }\n    return this;\n  }\n  root() {\n    let result = this;\n    while (result.parent && result.parent.type !== 'document') {\n      result = result.parent;\n    }\n    return result;\n  }\n  toJSON(_, inputs) {\n    let fixed = {};\n    let emitInputs = inputs == null;\n    inputs = inputs || new Map();\n    let inputsNextIndex = 0;\n    for (let name in this) {\n      if (!Object.prototype.hasOwnProperty.call(this, name)) {\n        /* c8 ignore next 2 */\n        continue;\n      }\n      if (name === 'parent' || name === 'proxyCache') continue;\n      let value = this[name];\n      if (Array.isArray(value)) {\n        fixed[name] = value.map(i => {\n          if (typeof i === 'object' && i.toJSON) {\n            return i.toJSON(null, inputs);\n          } else {\n            return i;\n          }\n        });\n      } else if (typeof value === 'object' && value.toJSON) {\n        fixed[name] = value.toJSON(null, inputs);\n      } else if (name === 'source') {\n        let inputId = inputs.get(value.input);\n        if (inputId == null) {\n          inputId = inputsNextIndex;\n          inputs.set(value.input, inputsNextIndex);\n          inputsNextIndex++;\n        }\n        fixed[name] = {\n          end: value.end,\n          inputId,\n          start: value.start\n        };\n      } else {\n        fixed[name] = value;\n      }\n    }\n    if (emitInputs) {\n      fixed.inputs = [...inputs.keys()].map(input => input.toJSON());\n    }\n    return fixed;\n  }\n  toProxy() {\n    if (!this.proxyCache) {\n      this.proxyCache = new Proxy(this, this.getProxyProcessor());\n    }\n    return this.proxyCache;\n  }\n  toString(stringifier = stringify) {\n    if (stringifier.stringify) stringifier = stringifier.stringify;\n    let result = '';\n    stringifier(this, i => {\n      result += i;\n    });\n    return result;\n  }\n  warn(result, text, opts) {\n    let data = {\n      node: this\n    };\n    for (let i in opts) data[i] = opts[i];\n    return result.warn(text, data);\n  }\n  get proxyOf() {\n    return this;\n  }\n}\nmodule.exports = Node;\nNode.default = Node;","map":{"version":3,"names":["require","CssSyntaxError","Stringifier","stringify","isClean","my","cloneNode","obj","parent","cloned","constructor","i","Object","prototype","hasOwnProperty","call","value","type","Array","isArray","map","j","sourceOffset","inputCSS","position","offset","column","line","length","Node","defaults","raws","name","nodes","node","clone","append","addToError","error","postcssNode","stack","source","test","s","replace","input","from","start","after","add","insertAfter","assign","overrides","before","insertBefore","cleanRaws","keepBetween","between","cloneAfter","cloneBefore","message","opts","end","rangeBy","getProxyProcessor","get","prop","root","toProxy","set","markDirty","markClean","next","undefined","index","positionBy","pos","positionInside","word","stringRepresentation","css","slice","indexOf","prev","endIndex","raw","defaultType","str","remove","removeChild","replaceWith","bookmark","foundSelf","result","toJSON","_","inputs","fixed","emitInputs","Map","inputsNextIndex","inputId","keys","proxyCache","Proxy","toString","stringifier","warn","text","data","proxyOf","module","exports","default"],"sources":["/Users/vagnerzezo/Documents/development/project/zmoveis/node_modules/postcss/lib/node.js"],"sourcesContent":["'use strict'\n\nlet CssSyntaxError = require('./css-syntax-error')\nlet Stringifier = require('./stringifier')\nlet stringify = require('./stringify')\nlet { isClean, my } = require('./symbols')\n\nfunction cloneNode(obj, parent) {\n  let cloned = new obj.constructor()\n\n  for (let i in obj) {\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) {\n      /* c8 ignore next 2 */\n      continue\n    }\n    if (i === 'proxyCache') continue\n    let value = obj[i]\n    let type = typeof value\n\n    if (i === 'parent' && type === 'object') {\n      if (parent) cloned[i] = parent\n    } else if (i === 'source') {\n      cloned[i] = value\n    } else if (Array.isArray(value)) {\n      cloned[i] = value.map(j => cloneNode(j, cloned))\n    } else {\n      if (type === 'object' && value !== null) value = cloneNode(value)\n      cloned[i] = value\n    }\n  }\n\n  return cloned\n}\n\nfunction sourceOffset(inputCSS, position) {\n  // Not all custom syntaxes support `offset` in `source.start` and `source.end`\n  if (\n    position &&\n    typeof position.offset !== 'undefined'\n  ) {\n    return position.offset;\n  }\n\n  let column = 1\n  let line = 1\n  let offset = 0\n\n  for (let i = 0; i < inputCSS.length; i++) {\n    if (line === position.line && column === position.column) {\n      offset = i\n      break\n    }\n\n    if (inputCSS[i] === '\\n') {\n      column = 1\n      line += 1\n    } else {\n      column += 1\n    }\n  }\n\n  return offset\n}\n\nclass Node {\n  constructor(defaults = {}) {\n    this.raws = {}\n    this[isClean] = false\n    this[my] = true\n\n    for (let name in defaults) {\n      if (name === 'nodes') {\n        this.nodes = []\n        for (let node of defaults[name]) {\n          if (typeof node.clone === 'function') {\n            this.append(node.clone())\n          } else {\n            this.append(node)\n          }\n        }\n      } else {\n        this[name] = defaults[name]\n      }\n    }\n  }\n\n  addToError(error) {\n    error.postcssNode = this\n    if (error.stack && this.source && /\\n\\s{4}at /.test(error.stack)) {\n      let s = this.source\n      error.stack = error.stack.replace(\n        /\\n\\s{4}at /,\n        `$&${s.input.from}:${s.start.line}:${s.start.column}$&`\n      )\n    }\n    return error\n  }\n\n  after(add) {\n    this.parent.insertAfter(this, add)\n    return this\n  }\n\n  assign(overrides = {}) {\n    for (let name in overrides) {\n      this[name] = overrides[name]\n    }\n    return this\n  }\n\n  before(add) {\n    this.parent.insertBefore(this, add)\n    return this\n  }\n\n  cleanRaws(keepBetween) {\n    delete this.raws.before\n    delete this.raws.after\n    if (!keepBetween) delete this.raws.between\n  }\n\n  clone(overrides = {}) {\n    let cloned = cloneNode(this)\n    for (let name in overrides) {\n      cloned[name] = overrides[name]\n    }\n    return cloned\n  }\n\n  cloneAfter(overrides = {}) {\n    let cloned = this.clone(overrides)\n    this.parent.insertAfter(this, cloned)\n    return cloned\n  }\n\n  cloneBefore(overrides = {}) {\n    let cloned = this.clone(overrides)\n    this.parent.insertBefore(this, cloned)\n    return cloned\n  }\n\n  error(message, opts = {}) {\n    if (this.source) {\n      let { end, start } = this.rangeBy(opts)\n      return this.source.input.error(\n        message,\n        { column: start.column, line: start.line },\n        { column: end.column, line: end.line },\n        opts\n      )\n    }\n    return new CssSyntaxError(message)\n  }\n\n  getProxyProcessor() {\n    return {\n      get(node, prop) {\n        if (prop === 'proxyOf') {\n          return node\n        } else if (prop === 'root') {\n          return () => node.root().toProxy()\n        } else {\n          return node[prop]\n        }\n      },\n\n      set(node, prop, value) {\n        if (node[prop] === value) return true\n        node[prop] = value\n        if (\n          prop === 'prop' ||\n          prop === 'value' ||\n          prop === 'name' ||\n          prop === 'params' ||\n          prop === 'important' ||\n          /* c8 ignore next */\n          prop === 'text'\n        ) {\n          node.markDirty()\n        }\n        return true\n      }\n    }\n  }\n\n  /* c8 ignore next 3 */\n  markClean() {\n    this[isClean] = true\n  }\n\n  markDirty() {\n    if (this[isClean]) {\n      this[isClean] = false\n      let next = this\n      while ((next = next.parent)) {\n        next[isClean] = false\n      }\n    }\n  }\n\n  next() {\n    if (!this.parent) return undefined\n    let index = this.parent.index(this)\n    return this.parent.nodes[index + 1]\n  }\n\n  positionBy(opts) {\n    let pos = this.source.start\n    if (opts.index) {\n      pos = this.positionInside(opts.index)\n    } else if (opts.word) {\n      let stringRepresentation = this.source.input.css.slice(\n        sourceOffset(this.source.input.css, this.source.start),\n        sourceOffset(this.source.input.css, this.source.end)\n      )\n      let index = stringRepresentation.indexOf(opts.word)\n      if (index !== -1) pos = this.positionInside(index)\n    }\n    return pos\n  }\n\n  positionInside(index) {\n    let column = this.source.start.column\n    let line = this.source.start.line\n    let offset = sourceOffset(this.source.input.css, this.source.start)\n    let end = offset + index\n\n    for (let i = offset; i < end; i++) {\n      if (this.source.input.css[i] === '\\n') {\n        column = 1\n        line += 1\n      } else {\n        column += 1\n      }\n    }\n\n    return { column, line }\n  }\n\n  prev() {\n    if (!this.parent) return undefined\n    let index = this.parent.index(this)\n    return this.parent.nodes[index - 1]\n  }\n\n  rangeBy(opts) {\n    let start = {\n      column: this.source.start.column,\n      line: this.source.start.line\n    }\n    let end = this.source.end\n      ? {\n          column: this.source.end.column + 1,\n          line: this.source.end.line\n        }\n      : {\n          column: start.column + 1,\n          line: start.line\n        }\n\n    if (opts.word) {\n      let stringRepresentation = this.source.input.css.slice(\n        sourceOffset(this.source.input.css, this.source.start),\n        sourceOffset(this.source.input.css, this.source.end)\n      )\n      let index = stringRepresentation.indexOf(opts.word)\n      if (index !== -1) {\n        start = this.positionInside(index)\n        end = this.positionInside(\n          index + opts.word.length,\n        )\n      }\n    } else {\n      if (opts.start) {\n        start = {\n          column: opts.start.column,\n          line: opts.start.line\n        }\n      } else if (opts.index) {\n        start = this.positionInside(opts.index)\n      }\n\n      if (opts.end) {\n        end = {\n          column: opts.end.column,\n          line: opts.end.line\n        }\n      } else if (typeof opts.endIndex === 'number') {\n        end = this.positionInside(opts.endIndex)\n      } else if (opts.index) {\n        end = this.positionInside(opts.index + 1)\n      }\n    }\n\n    if (\n      end.line < start.line ||\n      (end.line === start.line && end.column <= start.column)\n    ) {\n      end = { column: start.column + 1, line: start.line }\n    }\n\n    return { end, start }\n  }\n\n  raw(prop, defaultType) {\n    let str = new Stringifier()\n    return str.raw(this, prop, defaultType)\n  }\n\n  remove() {\n    if (this.parent) {\n      this.parent.removeChild(this)\n    }\n    this.parent = undefined\n    return this\n  }\n\n  replaceWith(...nodes) {\n    if (this.parent) {\n      let bookmark = this\n      let foundSelf = false\n      for (let node of nodes) {\n        if (node === this) {\n          foundSelf = true\n        } else if (foundSelf) {\n          this.parent.insertAfter(bookmark, node)\n          bookmark = node\n        } else {\n          this.parent.insertBefore(bookmark, node)\n        }\n      }\n\n      if (!foundSelf) {\n        this.remove()\n      }\n    }\n\n    return this\n  }\n\n  root() {\n    let result = this\n    while (result.parent && result.parent.type !== 'document') {\n      result = result.parent\n    }\n    return result\n  }\n\n  toJSON(_, inputs) {\n    let fixed = {}\n    let emitInputs = inputs == null\n    inputs = inputs || new Map()\n    let inputsNextIndex = 0\n\n    for (let name in this) {\n      if (!Object.prototype.hasOwnProperty.call(this, name)) {\n        /* c8 ignore next 2 */\n        continue\n      }\n      if (name === 'parent' || name === 'proxyCache') continue\n      let value = this[name]\n\n      if (Array.isArray(value)) {\n        fixed[name] = value.map(i => {\n          if (typeof i === 'object' && i.toJSON) {\n            return i.toJSON(null, inputs)\n          } else {\n            return i\n          }\n        })\n      } else if (typeof value === 'object' && value.toJSON) {\n        fixed[name] = value.toJSON(null, inputs)\n      } else if (name === 'source') {\n        let inputId = inputs.get(value.input)\n        if (inputId == null) {\n          inputId = inputsNextIndex\n          inputs.set(value.input, inputsNextIndex)\n          inputsNextIndex++\n        }\n        fixed[name] = {\n          end: value.end,\n          inputId,\n          start: value.start\n        }\n      } else {\n        fixed[name] = value\n      }\n    }\n\n    if (emitInputs) {\n      fixed.inputs = [...inputs.keys()].map(input => input.toJSON())\n    }\n\n    return fixed\n  }\n\n  toProxy() {\n    if (!this.proxyCache) {\n      this.proxyCache = new Proxy(this, this.getProxyProcessor())\n    }\n    return this.proxyCache\n  }\n\n  toString(stringifier = stringify) {\n    if (stringifier.stringify) stringifier = stringifier.stringify\n    let result = ''\n    stringifier(this, i => {\n      result += i\n    })\n    return result\n  }\n\n  warn(result, text, opts) {\n    let data = { node: this }\n    for (let i in opts) data[i] = opts[i]\n    return result.warn(text, data)\n  }\n\n  get proxyOf() {\n    return this\n  }\n}\n\nmodule.exports = Node\nNode.default = Node\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}