{"ast":null,"code":"import { createStore } from 'vuex';\nimport axios from 'axios';\n\n// Criação da store Vuex\nexport default createStore({\n  // State é onde armazenamos os dados compartilhados no aplicativo\n  state: {\n    products: [],\n    // Lista de produtos armazenada no estado global\n    category: [],\n    showcaseone: [],\n    showcasetwo: [],\n    showcasetree: []\n  },\n  // Getters são usados para acessar e processar os dados do estado\n  getters: {\n    allProducts: state => state.products,\n    // Retorna todos os produtos armazenados no estado\n    allCategory: state => state.category,\n    oneShowcase: state => state.showcaseone,\n    twoShowcase: state => state.showcasetwo,\n    treeShowcase: state => state.showcasetree\n  },\n  // Mutations são métodos sincronizados para modificar o estado\n  mutations: {\n    setProducts(state, products) {\n      // Atualiza a lista de produtos no estado com os dados recebidos\n      state.products = products;\n    },\n    setCategory(state, category) {\n      state.category = category;\n    },\n    oneShowcase(state, showcaseone) {\n      state.showcaseone = showcaseone;\n    },\n    twoShowcase(state, showcaseone) {\n      state.showcasetwo = showcaseone;\n    },\n    treeShowcase(state, showcasetree) {\n      state.showcasetree = showcasetree;\n    }\n  },\n  // Actions são métodos assíncronos usados para lidar com chamadas externas ou operações complexas\n  actions: {\n    async fetchProducts({\n      commit\n    }) {\n      try {\n        // Faz uma requisição HTTP para obter a lista de produtos\n        const response = await axios.get('https://dummyjson.com/products');\n        // Garante que os dados estão em JSON e chama a mutation\n        commit('setProducts', response.data);\n      } catch (error) {\n        console.error('Erro ao buscar produtos:', error);\n      }\n    },\n    async fetchCategory({\n      commit\n    }) {\n      try {\n        const response = await axios.get('https://dummyjson.com/products/categories');\n        commit('setCategory', response.data);\n      } catch (error) {\n        console.error('Erro ao buscar categorias:', error);\n      }\n    },\n    async fetchShowcaseOne({\n      commit\n    }) {\n      try {\n        const response = await axios.get('https://dummyjson.com/products/category/smartphones');\n        commit('oneShowcase', response.data);\n      } catch (error) {\n        console.error('Erro ao buscar categorias:', error);\n      }\n    },\n    async fetchShowcaseTwo({\n      commit\n    }) {\n      try {\n        const response = await axios.get('https://dummyjson.com/products/category/laptops');\n        commit('twoShowcase', response.data);\n      } catch (error) {\n        console.error('Erro ao buscar categorias:', error);\n      }\n    },\n    async fetchShowcaseTree({\n      commit\n    }) {\n      try {\n        const response = await axios.get('https://dummyjson.com/products/category/laptops');\n        commit('twoShowcase', response.data);\n      } catch (error) {\n        console.error('Erro ao buscar categorias:', error);\n      }\n    }\n  },\n  // Modules podem ser usados para dividir a store em partes menores e organizadas (não utilizado neste exemplo)\n  modules: {}\n});","map":{"version":3,"names":["createStore","axios","state","products","category","showcaseone","showcasetwo","showcasetree","getters","allProducts","allCategory","oneShowcase","twoShowcase","treeShowcase","mutations","setProducts","setCategory","actions","fetchProducts","commit","response","get","data","error","console","fetchCategory","fetchShowcaseOne","fetchShowcaseTwo","fetchShowcaseTree","modules"],"sources":["/Users/vagnerzezo/Documents/development/project/zmoveis/src/store/index.js"],"sourcesContent":["import { createStore } from 'vuex'\nimport axios from 'axios';\n\n// Criação da store Vuex\nexport default createStore({\n  // State é onde armazenamos os dados compartilhados no aplicativo\n  state: {\n    products: [], // Lista de produtos armazenada no estado global\n    category: [],\n    showcaseone: [],\n    showcasetwo: [],\n    showcasetree: []\n  },\n\n  // Getters são usados para acessar e processar os dados do estado\n  getters: {\n    allProducts: state => state.products, // Retorna todos os produtos armazenados no estado\n    allCategory: state => state.category,\n    oneShowcase: state => state.showcaseone,\n    twoShowcase: state => state.showcasetwo,\n    treeShowcase: state => state.showcasetree\n  },\n\n  // Mutations são métodos sincronizados para modificar o estado\n  mutations: {\n    setProducts(state, products) {\n      // Atualiza a lista de produtos no estado com os dados recebidos\n      state.products = products;\n    },\n    setCategory(state, category) {\n      state.category = category;\n    },\n    oneShowcase(state, showcaseone) {\n      state.showcaseone = showcaseone;\n    },\n    twoShowcase(state, showcaseone) {\n      state.showcasetwo = showcaseone;\n    },\n    treeShowcase(state, showcasetree) {\n      state.showcasetree = showcasetree\n    }\n  },\n\n  // Actions são métodos assíncronos usados para lidar com chamadas externas ou operações complexas\n  actions: {\n    async fetchProducts({ commit }) {\n      try {\n        // Faz uma requisição HTTP para obter a lista de produtos\n        const response = await axios.get('https://dummyjson.com/products');\n        // Garante que os dados estão em JSON e chama a mutation\n        commit('setProducts', response.data);\n      } catch (error) {\n        console.error('Erro ao buscar produtos:', error);\n      }\n    },\n    async fetchCategory({ commit }) {\n      try {\n        const response = await axios.get('https://dummyjson.com/products/categories');\n        commit('setCategory', response.data);\n      } catch (error) {\n        console.error('Erro ao buscar categorias:', error);\n      }\n    },\n    async fetchShowcaseOne({ commit }) {\n      try {\n        const response = await axios.get('https://dummyjson.com/products/category/smartphones');\n        commit('oneShowcase', response.data);\n      } catch (error) {\n        console.error('Erro ao buscar categorias:', error);\n      }\n    },\n    async fetchShowcaseTwo({ commit }) {\n      try {\n        const response = await axios.get('https://dummyjson.com/products/category/laptops');\n        commit('twoShowcase', response.data);\n      } catch (error) {\n        console.error('Erro ao buscar categorias:', error);\n      }\n    },\n    async fetchShowcaseTree({ commit }) {\n      try {\n        const response = await axios.get('https://dummyjson.com/products/category/laptops');\n        commit('twoShowcase', response.data);\n      } catch (error) {\n        console.error('Erro ao buscar categorias:', error);\n      }\n    },\n  },\n\n  // Modules podem ser usados para dividir a store em partes menores e organizadas (não utilizado neste exemplo)\n  modules: {\n  }\n});"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}